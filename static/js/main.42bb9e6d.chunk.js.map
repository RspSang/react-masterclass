{"version":3,"sources":["theme.ts","atoms.ts","api.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","App.tsx","index.tsx"],"names":["lightTheme","bgColor","textColor","accentColor","cardBgColor","borderColor","darkTheme","isDarkAtom","atom","key","default","BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinTickers","coinId","ChartBtn","styled","button","props","theme","Chart","isDark","useRecoilValue","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","useState","chart","setChart","onClick","current","type","series","name","map","price","close","options","mode","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","x","time_open","high","low","open","PricesContainer","div","PriceCardTitle","span","PriceCard","Price","tickersData","quotes","USD","percent_change_12h","percent_change_24h","percent_change_7d","percent_change_1y","Title","h1","Loader","Container","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","ThemeBtn","BackBtn","Coin","setDarkAtom","useSetRecoilState","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","tickersLoading","loading","Helmet","prev","to","rank","symbol","description","total_supply","max_supply","path","CoinsList","ul","li","Img","img","Coins","slice","coin","pathname","id","src","Router","process","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.42bb9e6d.chunk.js","sourcesContent":["import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  bgColor: \"#c8d6e5\",\r\n  textColor: \"#FFFFFF\",\r\n  accentColor: \"#5100AA\",\r\n  cardBgColor: \"#6200EE\",\r\n  borderColor: \"1px solid #EAEAEA\",\r\n};\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#1F1E22\",\r\n  textColor: \"#FFFFFF\",\r\n  accentColor: \"#AA86AA\",\r\n  cardBgColor: \"#BB86FC\",\r\n  borderColor: \"1px solid #2C2D33\",\r\n};\r\n","import { atom } from \"recoil\";\r\n\r\nexport const isDarkAtom = atom({ key: \"isDark\", default: false });\r\n\r\nexport default isDarkAtom;\r\n","const BASE_URL = `https://api.coinpaprika.com/v1`;\r\n\r\nexport function fetchCoins() {\r\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\r\n}\r\n\r\nexport function fetchCoinInfo(coinId: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinTickers(coinId: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\nexport function fetchCoinHistory(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n  return fetch(\r\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\r\n  ).then((response) => response.json());\r\n}\r\n","import { useQuery } from \"react-query\";\r\nimport { useState } from \"react\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\nimport ApexChart from \"react-apexcharts\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ChartBtn = styled.button`\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  border: ${(props) => props.theme.borderColor};\r\n  font-size: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 96px;\r\n  height: 48px;\r\n  border-radius: 30px;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface IHistorical {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\n\r\ninterface ChartProps {\r\n  coinId: string;\r\n}\r\nexport const Chart = ({ coinId }: ChartProps) => {\r\n  const isDark = useRecoilValue(isDarkAtom);\r\n  const { isLoading, data } = useQuery<IHistorical[]>(\r\n    [\"ohlcv\", coinId],\r\n    () => fetchCoinHistory(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    }\r\n  );\r\n  const [chart, setChart] = useState(true);\r\n\r\n  const setChartType = () => {\r\n    setChart((current) => !current);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        \"Loading chart...\"\r\n      ) : (\r\n        <>\r\n          <ChartBtn onClick={setChartType}>{chart ? \"📈\" : \"📊\"}</ChartBtn>\r\n\r\n          {chart ? (\r\n            <ApexChart\r\n              type=\"line\"\r\n              series={[\r\n                {\r\n                  name: \"Price\",\r\n                  data: data?.map((price) => price.close),\r\n                },\r\n              ]}\r\n              options={{\r\n                theme: {\r\n                  mode: isDark ? \"dark\" : \"light\",\r\n                },\r\n                chart: {\r\n                  height: 300,\r\n                  width: 500,\r\n                  toolbar: {\r\n                    show: false,\r\n                  },\r\n                  background: \"transparent\",\r\n                },\r\n                grid: { show: false },\r\n                stroke: {\r\n                  curve: \"smooth\",\r\n                  width: 4,\r\n                },\r\n                yaxis: {\r\n                  show: false,\r\n                },\r\n                xaxis: {\r\n                  axisBorder: { show: false },\r\n                  axisTicks: { show: false },\r\n                  labels: { show: false },\r\n                  type: \"datetime\",\r\n                  categories: data?.map((price) => price.time_close),\r\n                },\r\n                fill: {\r\n                  type: \"gradient\",\r\n                  gradient: {\r\n                    gradientToColors: [\"#0be881\"],\r\n                    stops: [0, 100],\r\n                  },\r\n                },\r\n                colors: [\"#0fbcf9\"],\r\n                tooltip: {\r\n                  y: {\r\n                    formatter: (value) => `$${value.toFixed(2)}`,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n          ) : (\r\n            <ApexChart\r\n              type=\"candlestick\"\r\n              series={[\r\n                {\r\n                  name: \"price\",\r\n                  data: data?.map((price) => {\r\n                    return {\r\n                      x: price.time_open,\r\n                      y: [price.close, price.high, price.low, price.open],\r\n                    };\r\n                  }),\r\n                },\r\n              ]}\r\n              options={{\r\n                theme: {\r\n                  mode: \"light\",\r\n                },\r\n                chart: {\r\n                  height: 300,\r\n                  width: 500,\r\n                  toolbar: {\r\n                    show: false,\r\n                  },\r\n                  background: \"transparent\",\r\n                },\r\n                xaxis: {\r\n                  type: \"datetime\",\r\n                  axisBorder: { show: false },\r\n                },\r\n                yaxis: {\r\n                  show: false,\r\n                },\r\n                grid: {\r\n                  show: false,\r\n                },\r\n              }}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import { useQuery } from \"react-query\";\r\nimport { fetchCoinTickers } from \"../api\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PricesContainer = styled.div`\r\n  display: grid;\r\n  margin: 10px 0px;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 10px;\r\n`;\r\n\r\nconst PriceCardTitle = styled.span`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: ${(props) => props.theme.cardBgColor};\r\n  padding: 7px 0px;\r\n  border-radius: 10px;\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\nconst PriceCard = styled.span`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: ${(props) => props.theme.cardBgColor};\r\n  padding: 7px 0px;\r\n  border-radius: 10px;\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\ninterface PriceProps {\r\n  coinId: string;\r\n}\r\n\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\nfunction Price({ coinId }: PriceProps) {\r\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\r\n    [\"tickers\", coinId],\r\n    () => fetchCoinTickers(coinId),\r\n    {\r\n      refetchInterval: 5000,\r\n    }\r\n  );\r\n  return (\r\n    <div>\r\n      <PricesContainer>\r\n        <PriceCardTitle>12Hours</PriceCardTitle>\r\n        <PriceCard>\r\n          ${tickersData?.quotes.USD.percent_change_12h.toFixed(3)}\r\n        </PriceCard>\r\n      </PricesContainer>\r\n      <PricesContainer>\r\n        <PriceCardTitle>24Hours</PriceCardTitle>\r\n        <PriceCard>\r\n          ${tickersData?.quotes.USD.percent_change_24h.toFixed(3)}\r\n        </PriceCard>\r\n      </PricesContainer>\r\n      <PricesContainer>\r\n        <PriceCardTitle>7Days</PriceCardTitle>\r\n        <PriceCard>\r\n          ${tickersData?.quotes.USD.percent_change_7d.toFixed(3)}\r\n        </PriceCard>\r\n      </PricesContainer>\r\n      <PricesContainer>\r\n        <PriceCardTitle>1Years</PriceCardTitle>\r\n        <PriceCard>\r\n          ${tickersData?.quotes.USD.percent_change_1y.toFixed(3)}\r\n        </PriceCard>\r\n      </PricesContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Price;\r\n","import { Helmet } from \"react-helmet\";\r\nimport { useQuery } from \"react-query\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  useParams,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\r\nimport Chart from \"./Chart\";\r\nimport Price from \"./Price\";\r\n\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Overview = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: ${(props) => props.theme.cardBgColor};\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n`;\r\nconst OverviewItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 33%;\r\n  span:first-child {\r\n    font-size: 10px;\r\n    font-weight: 400;\r\n    text-transform: uppercase;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\nconst Description = styled.p`\r\n  margin: 20px 0px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\n\r\nconst Tabs = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  margin: 25px 0px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Tab = styled.span<{ isActive: boolean }>`\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  background-color: ${(props) => props.theme.cardBgColor};\r\n  padding: 7px 0px;\r\n  border-radius: 10px;\r\n  color: ${(props) =>\r\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\r\n  a {\r\n    padding: 7px 0px;\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst ThemeBtn = styled.button`\r\n  all: unset;\r\n  position: absolute;\r\n  top: 50px;\r\n  right: 50px;\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  border: ${(props) => props.theme.borderColor};\r\n  font-size: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 96px;\r\n  height: 48px;\r\n  border-radius: 30px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst BackBtn = styled.button`\r\n  position: fixed;\r\n  z-index: 999999;\r\n  top: 50px;\r\n  left: 50px;\r\n\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  border: ${(props) => props.theme.borderColor};\r\n  font-size: 20px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 96px;\r\n  height: 48px;\r\n  border-radius: 30px;\r\n`;\r\n\r\ninterface RouteParams {\r\n  coinId: string;\r\n}\r\ninterface RouteState {\r\n  name: string;\r\n}\r\ninterface InfoData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n  description: string;\r\n  message: string;\r\n  open_source: boolean;\r\n  started_at: string;\r\n  development_status: string;\r\n  hardware_wallet: boolean;\r\n  proof_type: string;\r\n  org_structure: string;\r\n  hash_algorithm: string;\r\n  first_data_at: string;\r\n  last_data_at: string;\r\n}\r\ninterface PriceData {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  beta_value: number;\r\n  first_data_at: string;\r\n  last_updated: string;\r\n  quotes: {\r\n    USD: {\r\n      ath_date: string;\r\n      ath_price: number;\r\n      market_cap: number;\r\n      market_cap_change_24h: number;\r\n      percent_change_1h: number;\r\n      percent_change_1y: number;\r\n      percent_change_6h: number;\r\n      percent_change_7d: number;\r\n      percent_change_12h: number;\r\n      percent_change_15m: number;\r\n      percent_change_24h: number;\r\n      percent_change_30d: number;\r\n      percent_change_30m: number;\r\n      percent_from_price_ath: number;\r\n      price: number;\r\n      volume_24h: number;\r\n      volume_24h_change_24h: number;\r\n    };\r\n  };\r\n}\r\n\r\ninterface ICoinProps {}\r\n\r\nfunction Coin({}: ICoinProps) {\r\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\r\n  const isDark = useRecoilValue(isDarkAtom);\r\n  const toogleDarkAtom = () => setDarkAtom((prev) => !prev);\r\n  const { coinId } = useParams<RouteParams>();\r\n  const { state } = useLocation<RouteState>();\r\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\r\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\r\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\r\n    [\"info\", coinId],\r\n    () => fetchCoinInfo(coinId)\r\n  );\r\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\r\n    [\"tickers\", coinId],\r\n    () => fetchCoinTickers(coinId),\r\n    {\r\n      refetchInterval: 5000,\r\n    }\r\n  );\r\n  const loading = infoLoading || tickersLoading;\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>\r\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\r\n        </Title>\r\n        <ThemeBtn onClick={toogleDarkAtom}>{isDark ? \"🌚\" : \"🌞\"}</ThemeBtn>\r\n        <Link to={\"/\"}>\r\n          <BackBtn>👈</BackBtn>\r\n        </Link>{\" \"}\r\n      </Header>\r\n\r\n      {loading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Rank:</span>\r\n              <span>{infoData?.rank}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Symbol:</span>\r\n              <span>${infoData?.symbol}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Price:</span>\r\n              <span>${tickersData?.quotes.USD.price.toFixed(3)}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n          <Description>{infoData?.description}</Description>\r\n          <Overview>\r\n            <OverviewItem>\r\n              <span>Total Suply:</span>\r\n              <span>{tickersData?.total_supply}</span>\r\n            </OverviewItem>\r\n            <OverviewItem>\r\n              <span>Max Supply:</span>\r\n              <span>{tickersData?.max_supply}</span>\r\n            </OverviewItem>\r\n          </Overview>\r\n\r\n          <Tabs>\r\n            <Tab isActive={chartMatch !== null}>\r\n              <Link to={`/${coinId}/chart`}>Chart</Link>\r\n            </Tab>\r\n            <Tab isActive={priceMatch !== null}>\r\n              <Link to={`/${coinId}/price`}>Price</Link>\r\n            </Tab>\r\n          </Tabs>\r\n\r\n          <Switch>\r\n            <Route path={`/:coinId/price`}>\r\n              <Price coinId={coinId} />\r\n            </Route>\r\n            <Route path={`/:coinId/chart`}>\r\n              <Chart coinId={coinId} />\r\n            </Route>\r\n          </Switch>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coin;\r\n","import { Helmet } from \"react-helmet\";\r\nimport { useQuery } from \"react-query\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\nimport styled from \"styled-components\";\r\nimport { fetchCoins } from \"../api\";\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n  max-width: 480px;\r\n  margin: 0 auto;\r\n`;\r\nconst Header = styled.header`\r\n  height: 15vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\n\r\nconst ThemeBtn = styled.button`\r\n  all: unset;\r\n  position: absolute;\r\n  top: 50px;\r\n  right: 50px;\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  border: ${(props) => props.theme.borderColor};\r\n  font-size: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 96px;\r\n  height: 48px;\r\n  border-radius: 30px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CoinsList = styled.ul``;\r\nconst Coin = styled.li`\r\n  background-color: ${(props) => props.theme.cardBgColor};\r\n  color: ${(props) => props.theme.textColor};\r\n  border-radius: 15px;\r\n  margin-bottom: 10px;\r\n  a {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 20px;\r\n    transition: color 0.2s ease-in;\r\n  }\r\n  &:hover {\r\n    a {\r\n      color: ${(props) => props.theme.accentColor};\r\n    }\r\n  }\r\n`;\r\nconst Title = styled.h1`\r\n  font-size: 48px;\r\n  color: ${(props) => props.theme.accentColor};\r\n`;\r\nconst Loader = styled.span`\r\n  text-align: center;\r\n  display: block;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 35px;\r\n  height: 35px;\r\n  margin-right: 10px;\r\n`;\r\n\r\ninterface ICoin {\r\n  id: string;\r\n  name: string;\r\n  symbol: string;\r\n  rank: number;\r\n  is_new: boolean;\r\n  is_active: boolean;\r\n  type: string;\r\n}\r\n\r\ninterface ICoinsProps {}\r\n\r\nfunction Coins({}: ICoinsProps) {\r\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\r\n  const isDark = useRecoilValue(isDarkAtom);\r\n  const toogleDarkAtom = () => setDarkAtom((prev) => !prev);\r\n  const { isLoading, data } = useQuery<ICoin[]>(\"allcoins\", fetchCoins);\r\n  return (\r\n    <Container>\r\n      <Helmet>\r\n        <title>코인</title>\r\n      </Helmet>\r\n      <Header>\r\n        <Title>코인</Title>\r\n      </Header>\r\n      <ThemeBtn onClick={toogleDarkAtom}>{isDark ? \"🌚\" : \"🌞\"}</ThemeBtn>\r\n      {isLoading ? (\r\n        <Loader>Loading...</Loader>\r\n      ) : (\r\n        <CoinsList>\r\n          {data?.slice(0, 100).map((coin) => (\r\n            <Coin key={coin.id}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/${coin.id}`,\r\n                  state: { name: coin.name },\r\n                }}\r\n              >\r\n                <Img\r\n                  src={`https://cryptocurrencyliveprices.com/img/${coin.id}.png`}\r\n                />\r\n                {coin.name} &rarr;\r\n              </Link>\r\n            </Coin>\r\n          ))}\r\n        </CoinsList>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\nexport default Coins;","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Coin from \"./routes/Coin\";\r\nimport Coins from \"./routes/Coins\";\r\n\r\ninterface IRouterProps {}\r\n\r\nfunction Router({}: IRouterProps) {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path={process.env.PUBLIC_URL + \"/:coinId\"}>\r\n          <Coin />\r\n        </Route>\r\n        <Route path={process.env.PUBLIC_URL + \"/\"}>\r\n          <Coins />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nexport default Router;\r\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\nimport { darkTheme, lightTheme } from \"./theme\";\r\nimport Router from \"./Router\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"./atoms\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  const isDark = useRecoilValue(isDarkAtom);\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\r\n        <GlobalStyle />\r\n        <Router />\r\n        <ReactQueryDevtools initialIsOpen={true} />\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport App from \"./App\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <QueryClientProvider client={queryClient}>\r\n        <App />\r\n      </QueryClientProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}